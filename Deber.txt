Universidad De Las Fuerzas Armadas ESPE
Nombre:Kevin Guanoluisa
NRC:13930
Deber N1
1.-Los comando de git mas usados:

Git es un sistema de control de versiones distribuido, lo que significa que un clon local del proyecto es un repositorio de control de versiones completo. Estos repositorios locales plenamente funcionales permiten trabajar sin conexión o de forma remota con facilidad

1. Git clone
Git clone es un comando para descargar el código fuente existente desde un repositorio remoto (como Github, por ejemplo). En otras palabras, Git clone básicamente hace una copia idéntica de la última versión de un proyecto en un repositorio y la guarda en su computadora.

2. Git branch
Las ramas son muy importantes en el mundo de git. Mediante el uso de ramas, varios desarrolladores pueden trabajar en paralelo en el mismo proyecto simultáneamente. Podemos usar el comando git branch para crear, enumerar y eliminar ramas. Creando una nueva rama:

3. Git checkout
Este es también uno de los comandos Git más utilizados. Para trabajar en una rama, primero debe cambiarse a ella. Usamos git checkout principalmente para cambiar de una rama a otra. También podemos usarlo para verificar archivos y confirmaciones.

4. Git status
El comando de estado de Git nos brinda toda la información necesaria sobre la rama actual.
Podemos recopilar información acerca de:  

Si la rama actual está actualizada.    
Si hay algo que necesita un commit, un add, o borrarse.  
Si hay archivos preparados, sin preparar o sin seguimiento    
Si hay archivos creados, modificados o eliminados

5. Git add
Cuando creamos, modificamos o eliminamos un archivo, estos cambios ocurrirán en nuestro local y no se incluirán en la próxima confirmación (a menos que cambiemos las configuraciones).

Necesitamos usar el comando git add para incluir los cambios de un archivo(s) en nuestro próximo commit.

6. Git commit
Este es quizás el comando más utilizado de Git. Una vez que llegamos a cierto punto en el desarrollo, queremos guardar nuestros cambios (tal vez después de una tarea o problema específico).

Git commit es como establecer un punto de control en el proceso de desarrollo al que puede volver más tarde si es necesario. También necesitamos escribir un mensaje corto para explicar lo que hemos desarrollado o cambiado en el código fuente.

7. Git push
Después de confirmar los cambios (con git commit), lo siguiente que hay que hacer es enviar estos cambios al servidor remoto. Git push sube tus confirmaciones al repositorio remoto.

8. Git pull
El comando git pull se usa para obtener actualizaciones del repositorio remoto. Este comando es una combinación de git fetch y git merge, lo que significa que, cuando usamos git pull, obtienes las actualizaciones del repositorio remoto (git fetch) e inmediatamente aplica los últimos cambios en su local (git merge). (En simples palabras, sirve para traer el repositorio remoto a tu repositorio local).

9. Git revert
A veces necesitamos deshacer los cambios que hemos hecho. Hay varias formas de deshacer nuestros cambios de forma local o remota (depende de lo que necesitemos), pero debemos usar estos comandos con cuidado para evitar eliminaciones no deseadas.

Una forma más segura de deshacer nuestras confirmaciones es usando git revert. Para ver nuestro historial de confirmaciones, primero debemos usar git log -- oneline:

10. Git merge
Cuando hayas completado el desarrollo en tu rama y todo funcione bien, el paso final es fusionar la rama con la rama principal (dev o master branch). Esto se hace con el comando git merge.

Git merge básicamente integra su rama de características (feature branch) con todas sus confirmaciones en la rama dev (o master). Es importante recordar que primero debes estar en la rama específica que deseas fusionar con tu rama de características.

Bibliografia:
https://www.freecodecamp.org/espanol/news/10-comandos-de-git-que-todo-desarrollador-debe-conocer/